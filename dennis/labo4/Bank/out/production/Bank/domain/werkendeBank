package domain;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class Bank implements Subject {
    private HashMap<Integer, Account> accounts;
    private ArrayList<Observer> observers;
    private Account newest = new Account(0,0);
    private Events type;

    public Bank(){
        accounts = new HashMap<>();
        observers = new ArrayList<>();
    }

    public void addAccount(Account a){
        accounts.put(a.getIndex(),a);
        newest = a;
        notifyObservers(Events.NEW);
    }
    public HashMap getAccounts(){
        return this.accounts;
    }
    public Account getAccount(int index){
       return accounts.get(index);
    }
    public void deleteAccount(int index){
        accounts.remove(index);
    }

    public Account getNewest() {
            return newest;
    }

    @Override
    public String toString() {
        String result = "Bank:\n";
        for(int i = 0; i < accounts.size(); i++){
            result += "account "+(i+1)+". " + accounts.get(i)+"\n";
        }
        return result;
    }

    @Override
    public void registerObserver(Observer o) {
        observers.add(o);
    }

    @Override
    public void removeObserver(Observer o) {
        int i = observers.indexOf(o);
        if (i >= 0) {
            observers.remove(i);
        }
    }

    @Override
    public void notifyObservers(Events e) {
        for (int i = 0; i < observers.size();i++) {
            Observer observer = (Observer) observers.get(i);
            observer.update(e);
        }
    }
    public void storten(Account a,double saldo){
        Account account = accounts.get(a.getIndex());
        if(account == null){
            System.out.println("rekening niet gevonden");
        }
        else{
            account.storten(saldo);
            newest = account;
            notifyObservers(type.STORTEN);
        }
    }
    public void storten(int a,double saldo){
        Account account = accounts.get(a);
        if(account == null){
            System.out.println("rekening niet gevonden");
        }
        else{
            account.storten(saldo);
            newest = account;
            notifyObservers(type.STORTEN);
        }
    }
    public void afhalen(int a,double saldo){
        Account account = accounts.get(a);
        if(account == null){
            System.out.println("rekening niet gevonden");
        }
        if (account.getSaldo() < saldo){
            System.out.println("niet genoeg geld op de rekening");
        }
        else{
            account.afhalen(saldo);
            newest = account;
            notifyObservers(type.AFHALEN);
        }
    }
    public void afhalen(Account a,double saldo){
        Account account = accounts.get(a.getIndex());
        if(account == null){
            System.out.println("rekening niet gevonden");
        }else{
            if (account.getSaldo() < saldo){
            System.out.println("niet genoeg geld op de rekening");
        }
        else{
            account.afhalen(saldo);
            newest = account;
            notifyObservers(type.AFHALEN);
        }}

    }

}
